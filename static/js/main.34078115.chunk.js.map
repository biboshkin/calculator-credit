{"version":3,"sources":["components/slider/slider.jsx","components/total-cell/total-cell.jsx","components/calculator/calculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["Slider","value","formatter","min","max","step","onChange","marks","style","marginBottom","span","tipFormatter","offset","TotalCell","title","Title","type","level","calculatePayment","amount","period","rate","ratePerMonth","chain","divide","done","rateKoef","add","pow","multiply","subtract","round","Calculator","useState","setAmount","setPeriod","tipFormatterAmount","number","Intl","NumberFormat","format","tipFormatterPeriod","amountParams","0","300000","width","label","periodParams","36","margin","orientation","marginTop","DollarCircleOutlined","fontSize","marginRight","InfoCircleOutlined","float","gutter","Header","Layout","Content","App","className","color","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34078115.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Row, Col, Slider as SliderUI, InputNumber } from 'antd'\r\n\r\nexport const Slider = ({ value, formatter, min, max, step, onChange, marks }) => (\r\n  <Row style={{ marginBottom: \"48px\" }}>\r\n    <Col span={18}>\r\n      <SliderUI\r\n        min={min}\r\n        max={max}\r\n        step={step}\r\n        onChange={onChange}\r\n        tipFormatter={formatter}\r\n        marks={marks}\r\n        value={value}\r\n      />\r\n    </Col>\r\n    <Col span={4} offset={2}>\r\n      <InputNumber\r\n        min={min}\r\n        max={max}\r\n        step={step}\r\n        onChange={onChange}\r\n        formatter={formatter}\r\n        value={value}\r\n      />\r\n    </Col>\r\n  </Row>\r\n);\r\n","import React from \"react\";\r\nimport { Typography } from 'antd'\r\n\r\nexport const TotalCell = ({ title, value }) => (\r\n  <>\r\n    <Typography.Title type=\"secondary\" level={5}>{title}</Typography.Title>\r\n    <Typography.Title level={5}>{value}</Typography.Title>\r\n  </>\r\n);\r\n","import { Divider, Card, Row, Col, Tooltip } from \"antd\";\r\nimport { chain } from 'mathjs'\r\nimport { DollarCircleOutlined, InfoCircleOutlined, InfoCircleTwoTone } from \"@ant-design/icons\";\r\nimport { Slider } from \"../slider\";\r\nimport React, { useState } from \"react\";\r\nimport { TotalCell } from \"../total-cell\";\r\n\r\nconst calculatePayment = (amount, period = 0, rate) => {\r\n    const ratePerMonth = chain(rate).divide(12).divide(100).done()\r\n    const rateKoef = chain(ratePerMonth).add(1).pow(period).done()\r\n    return chain(amount).multiply(ratePerMonth).multiply(rateKoef).divide(chain(rateKoef).subtract(1).done()).round(0).done()\r\n};\r\n\r\nexport const Calculator = () => {\r\n  const [amount, setAmount] = useState(0);\r\n  const [period, setPeriod] = useState(0);\r\n\r\n  const rate = 9;\r\n\r\n  const marksAmount = {\r\n    0: \"10 000 руб\",\r\n    300000: {\r\n      style: {\r\n        width: \"100px\",\r\n      },\r\n      label: \"300 000 руб\",\r\n    },\r\n  };\r\n\r\n  const marksPeriod = {\r\n    0: \"1 мес\",\r\n    36: {\r\n      style: {\r\n        width: \"100px\",\r\n      },\r\n      label: \"3 года\",\r\n    },\r\n  };\r\n\r\n  const tipFormatterAmount = (number) => {\r\n    return new Intl.NumberFormat(\"ru-RU\").format(number);\r\n  };\r\n\r\n  const tipFormatterPeriod = (number) => {\r\n    return `${number} мес`;\r\n  };\r\n\r\n  const amountParams = {\r\n    min: 10000,\r\n    max: 300000,\r\n    step: 10000,\r\n    onChange: (value) => {\r\n      setAmount(value);\r\n    },\r\n    value: amount,\r\n    formatter: tipFormatterAmount,\r\n    marks: marksAmount,\r\n  };\r\n\r\n  const periodParams = {\r\n    min: 1,\r\n    max: 36,\r\n    step: 1,\r\n    onChange: (value) => {\r\n      setPeriod(value);\r\n    },\r\n    value: period,\r\n    formatter: tipFormatterPeriod,\r\n    marks: marksPeriod,\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: \"100px 0\" }}>\r\n      <Divider orientation=\"left\">Выберите сумму кредита</Divider>\r\n      <Slider {...amountParams} />\r\n\r\n      <Divider style={{ marginTop: \"24px\" }} orientation=\"left\">\r\n        Выберите срок кредита\r\n      </Divider>\r\n      <Slider {...periodParams} />\r\n\r\n      <Card\r\n        title={\r\n          <>\r\n            <DollarCircleOutlined\r\n              style={{ fontSize: \"20px\", marginRight: \"8px\" }}\r\n            />\r\n            <span>Информация о кредите</span>\r\n            <Tooltip title=\"Окончательные условия будут известны после оформления заявки\">\r\n                <InfoCircleOutlined style={{ float: 'right', marginTop: '6px' }} />\r\n            </Tooltip>\r\n          </>\r\n        }\r\n      >\r\n        <Row gutter={[0, 24]}>\r\n          <Col span={12}>\r\n            <TotalCell\r\n              value={`${tipFormatterAmount(amount)} руб`}\r\n              title=\"Сумма\"\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <TotalCell value={tipFormatterPeriod(period)} title=\"Срок\" />\r\n          </Col>\r\n          <Col span={12}>\r\n            <TotalCell\r\n              value={`${rate} %`}\r\n              title=\"Ставка\"\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <TotalCell\r\n              value={`${tipFormatterAmount(calculatePayment(amount, period, rate))} руб`}\r\n              title=\"Платёж в месяц\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import \"antd/dist/antd.css\";\nimport { Layout, Typography, Row, Col,  } from \"antd\";\nimport { Calculator } from \"./components\";\n\nconst { Header, Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Layout>\n          <Header>\n            <Typography.Title style={{ color: \"whitesmoke\" }}>\n              Расчёт параметров кредита\n            </Typography.Title>\n          </Header>\n          <Content style={{ height: '100vh' }}>\n            <Row>\n              <Col span={6} offset={8}>\n                <Calculator />\n              </Col>\n            </Row>\n          </Content>\n        </Layout>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}